{"file":"products.mjs","mappings":";;;;;;;;AAAY,MAAC,kBAAkB,YAAY,YAAY;AAAA,EAErD,OAAO,OAAO;AAAA,IACZ,OAAO,CAAA;AAAA,EACX;AAAA,EACE,SAAS;AAAA,IACP,MAAM,SAAS,QAAQ;AACrB,UAAI,KAAK,MAAM,OAAQ;AAEvB,YAAM,EAAE,SAAS,MAAM,SAAS,GAAG,OAAO,OAAO,OAAO,aAAa;AAAA,QACnE,KAAK;AAAA;AAAA,QACL,QAAQ;AAAA;AAAA,QACR,cAAc;AAAA;AAAA,QACd,SAAS,MAAM,CAAE;AAAA;AAAA,MACzB,GAAO,aAAA;AAED,WAAK,QAAQ,KAAK,SAAS,CAAA;AAAA,IACjC;AAAA,EACA;AACA,CAAC;AAE+B,YAAY,cAAc;AAAA,EACxD,OAAO,OAAO;AAAA,IACZ,OAAO,CAAA;AAAA,EACX;AAAA,EACE,SAAS;AAAA,IACP,MAAM,SAAS,QAAQ;AACrB,UAAI,KAAK,MAAM,WAAW,GAAG;AAC3B,cAAM,EAAE,SAAS,MAAM,SAAS,GAAG,OAAO,OAAO,OAAO,eAAa,aAAA;AACrE,aAAK,QAAQ,KAAK,SAAS,CAAA;AAAA,MACnC;AAAA,IACA;AAAA,EACA;AACA,CAAC;","names":[],"sources":["../../../../stores/products.js"],"sourcesContent":["export const useProductStore = defineStore('products', {\n\n  state: () => ({\n    items: []\n  }),\n  actions: {\n    async fetchAll(config) {\n      if (this.items.length) return\n\n      const { data } = await useFetch(`${config.public.apiBase}/products`, {\n        key: 'products',             // identifică cache-ul\n        server: true,                // rulează și pe server\n        initialCache: true,          // trimite datele spre client\n        default: () => []            // fallback dacă nu vine nimic\n      })\n\n      this.items = data.value || []\n    }\n  }\n})\n\nexport const useCategoryStore = defineStore('categories', {\n  state: () => ({\n    items: []\n  }),\n  actions: {\n    async fetchAll(config) {\n      if (this.items.length === 0) {\n        const { data } = await useFetch(`${config.public.apiBase}/categories`)\n        this.items = data.value || []\n      }\n    }\n  }\n})"],"version":3}